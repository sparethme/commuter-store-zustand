{"version":3,"sources":["components/Cart.js","components/ProductCard.js","components/CartSummary.js","App.js"],"names":["useCartStore","create","set","cart","addProduct","id","name","state","quantity","removeProduct","deleteProduct","ProductCard","product","price","image","View","style","padding","TouchableOpacity","onPress","borderColor","borderWidth","margin","justifyContent","alignItems","Text","CartSummary","props","cartArray","Object","keys","map","key","console","log","navigation","useNavigation","cartProduct","flexDirection","Button","title","navigate","client","ApolloClient","uri","cache","InMemoryCache","headers","PRODUCTS","gql","Stack","createNativeStackNavigator","StoreScreen","useQuery","loading","error","data","products","flex","CheckoutScreen","App","ApolloProvider","NavigationContainer","Navigator","initialRouteName","Screen","component"],"mappings":"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","file":"static/js/app.30554c6c.chunk.js","sourcesContent":["import create from \"zustand\";\n\nexport const useCartStore = create((set) => ({\n  cart: {},\n  addProduct: ({ id, name }) => {\n    set((state) => {\n      const cart = { ...state.cart };\n\n      if (!cart[id]) {\n        cart[id] = {\n          id,\n          name,\n          quantity: 0,\n        };\n      }\n\n      cart[id].quantity += 1;\n\n      return { cart };\n    });\n  },\n  removeProduct: () => {},\n  deleteProduct: () => {},\n}));\n","// import react from \"react\";\nimport { View, Text, TouchableOpacity } from \"react-native\";\nimport { useCartStore } from \"./Cart\";\n\nexport function ProductCard({ product }) {\n  const { id, name, price, image } = product ? product : null;\n  const { cart, addProduct, quantity } = useCartStore((state) => ({\n    cart: state.cart,\n    addProduct: state.addProduct,\n    // TODO: deconstruct quantity=\n    // if undefined quanitty than pass 0\n    quantity: state.cart[id]?.quantity || 0,\n  }));\n\n  // console.log(\"cart\", cart);\n  return (\n    <View style={{ padding: 10 }}>\n      <TouchableOpacity\n        onPress={() => {\n          addProduct({ id: id, name: name });\n        }}\n        style={{\n          borderColor: \"red\",\n          borderWidth: 2,\n          margin: 3,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          padding: 20,\n        }}\n      >\n        <Text>{name}</Text>\n        <Text>{image}</Text>\n        <Text>{price}</Text>\n        <Text>{quantity}</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n","import { View, Text, Button } from \"react-native\";\nimport { useCartStore } from \"./Cart\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nfunction CartSummary(props) {\n  const { quantity, addProduct, cart } = useCartStore((state) => ({\n    cart: state.cart,\n    // quantity: state.cart[id]?.quantity || 0,\n    addProduct: state.addProduct,\n  }));\n\n  const cartArray = Object.keys(cart).map((key) => {\n    return cart[key];\n  });\n\n  console.log(\"array\", cartArray);\n\n  const navigation = useNavigation();\n  return (\n    <View>\n      {cartArray.map((cartProduct) => (\n        <View\n          key={cartProduct.id}\n          style={{\n            flexDirection: \"row\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <Text>{cartProduct.name}</Text>\n          <Button\n            onPress={() => {\n              console.log(\"todo: decrease product quantity\");\n            }}\n            title=\"-\"\n          />\n          <Text>{cartProduct.quantity}</Text>\n          <Button\n            onPress={() => {\n              addProduct({ id: cartProduct.id, name: cartProduct.name });\n            }}\n            title=\"+\"\n          />\n        </View>\n      ))}\n      <Button\n        title=\"Go to Checkout\"\n        onPress={() => navigation.navigate(\"Checkout\")}\n      />\n    </View>\n  );\n}\n\nexport default CartSummary;\n","import { StyleSheet, Text, View, Button } from \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  useQuery,\n  gql,\n} from \"@apollo/client\";\nimport { ProductCard } from \"./components/ProductCard\";\nimport CartSummary from \"./components/CartSummary\";\n\nconst client = new ApolloClient({\n  // ideally env variables here but for sake of testing\n  uri: \"https://charmed-squirrel-78.hasura.app/v1/graphql\",\n  cache: new InMemoryCache(),\n  headers: {\n    \"x-hasura-admin-secret\": \"adminsecret\",\n  },\n});\n\nconst PRODUCTS = gql`\n  query GetStoreProducts {\n    product {\n      id\n      name\n      price\n      image\n    }\n  }\n`;\n\nconst Stack = createNativeStackNavigator();\n\nfunction StoreScreen({ navigation }) {\n  const { loading, error, data } = useQuery(PRODUCTS);\n  if (loading) return <p>Loading</p>;\n  if (error) return <p>Error</p>;\n\n  const products = data ? data.product : [];\n\n  console.log(\"products\", products);\n\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: \"center\",\n        borderColor: \"green\",\n        borderWidth: 1,\n      }}\n    >\n      <Text>Commuter Essentials Store</Text>\n      <View style={{ flexDirection: \"row\" }}>\n        <View\n          style={{\n            flex: 3,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            borderColor: \"red\",\n            borderWidth: 1,\n          }}\n        >\n          {products.map((product) => (\n            <ProductCard key={product.id} product={product} />\n          ))}\n        </View>\n        <View\n          style={{\n            flex: 1,\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            borderColor: \"blue\",\n            borderWidth: 1,\n          }}\n        >\n          <CartSummary />\n        </View>\n      </View>\n    </View>\n  );\n}\n\nfunction CheckoutScreen({ navigation }) {\n  return (\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n      <Text>Checkout Screen</Text>\n      <Button title=\"Go Back\" onPress={() => navigation.navigate(\"Store\")} />\n    </View>\n  );\n}\n\nexport default function App() {\n  return (\n    <ApolloProvider client={client}>\n      <NavigationContainer>\n        <Stack.Navigator initialRouteName=\"Home\">\n          <Stack.Screen name=\"Store\" component={StoreScreen} />\n          <Stack.Screen name=\"Checkout\" component={CheckoutScreen} />\n        </Stack.Navigator>\n      </NavigationContainer>\n    </ApolloProvider>\n  );\n}\n"],"sourceRoot":""}